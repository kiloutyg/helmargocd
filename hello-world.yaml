apiVersion: v1
kind: ConfigMap
metadata:
  name: app1-cm
  namespace: argo-hello-world
data:
  # Clés et valeurs
  app_name: app1
  app_env: dev
  app_debug: "false"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: example-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data"  # Assurez-vous que ce chemin existe sur le nœud

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: example-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1-service
  namespace: argo-hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
      - name: hello-world
        image: rancher/hello-world:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        env:
          - name: APP_NAME
            valueFrom:
              configMapKeyRef:
                name: app1-cm  # Nom de la ConfigMap
                key: app_name     # Clé de la variable dans la ConfigMap

---
apiVersion: v1
kind: Service
metadata:
  name: app1-service
spec:
  selector:
    app: app1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app2-cm
data:
  # Clés et valeurs
  app_name: app2
  app_env: dev
  app_debug: "false"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2-service
  namespace: argo-hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
      - name: hello-world
        image: rancher/hello-world:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        env:
          - name: APP_NAME
            valueFrom:
              configMapKeyRef:
                name: app2-cm
                key: app_name
        volumeMounts:
          - mountPath: /data  # Chemin dans le conteneur où le volume sera monté
            name: example-volume
      volumes:
        - name: example-volume
          persistentVolumeClaim:
            claimName: example-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: app2-service
spec:
  selector:
    app: app2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
spec:
  rules:
  - host: app1.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app1-service
            port:
              number: 80
  - host: app2.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app2-service
            port:
              number: 80
